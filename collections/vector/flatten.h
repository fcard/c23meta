#ifndef C23META_VECTOR_FLATTEN
#define C23META_VECTOR_FLATTEN

#define VECTOR32_FLATTEN(X) _VECTOR32_FLATTEN_C(X)
#define _VECTOR32_FLATTEN_C(X) TUPLE_AS_VECTOR32(_VECTOR32_FLATTEN_EVALX(_TUPLE_REST _VECTOR32_FLATTEN_EVAL((_VECTOR32_FLATTEN(VECTOR32_VALUES(X),())))))
#define _VECTOR32_FLATTEN_EVAL(X)  _VECTOR32_FLATTEN_EVAL1(_VECTOR32_FLATTEN_EVAL1(_VECTOR32_FLATTEN_EVAL1(_VECTOR32_FLATTEN_EVAL1(X))))
#define _VECTOR32_FLATTEN_EVAL1(X) _VECTOR32_FLATTEN_EVAL2(_VECTOR32_FLATTEN_EVAL2(_VECTOR32_FLATTEN_EVAL2(_VECTOR32_FLATTEN_EVAL2(X))))
#define _VECTOR32_FLATTEN_EVAL2(X) _VECTOR32_FLATTEN_EVAL3(_VECTOR32_FLATTEN_EVAL3(_VECTOR32_FLATTEN_EVAL3(_VECTOR32_FLATTEN_EVAL3(X))))
#define _VECTOR32_FLATTEN_EVAL3(X) X
#define _VECTOR32_FLATTEN_EVALX(X) X

#define _VECTOR32_FLATTEN(X,L) DEFER(CAT(_VECTOR32_FLATTEN_X,TUPLE_IS_EMPTY(X)))(X,L)
#define _VECTOR32_FLATTEN_X1(X,L) CAT(_VECTOR32_FLATTEN_Z,LIST_IS_NIL(L))(L)
#define _VECTOR32_FLATTEN_X0(X,L) CAT(_VECTOR32_FLATTEN_Y,IS_VECTOR32(TUPLE_FIRST(X)))(X,L)

#define _VECTOR32_FLATTEN_Y1(X,L) DEFER(_VECTOR32_FLATTEN_I())(VECTOR32_VALUES(TUPLE_FIRST(X)), (TUPLE_REST(X),L))
#define _VECTOR32_FLATTEN_Y0(X,L) ,TUPLE_FIRST(X)DEFER(_VECTOR32_FLATTEN_I)()(TUPLE_REST(X),L)

#define _VECTOR32_FLATTEN_Z1(L)
#define _VECTOR32_FLATTEN_Z0(L) DEFER(_VECTOR32_FLATTEN_I)()(LIST_FIRST(L),LIST_REST(L))

#define _VECTOR32_FLATTEN_I() _VECTOR32_FLATTEN


#endif